/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nbs.view.manager.GL;

import Sources.ExpandOrCollapseTree;
import Sources.ReportFileLocator;
import com.nbs.connection.DB;
import com.nbs.impl.ServerConnection;
import com.nbs.view.common.GeneralUserLogin;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Font;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author mmh
 */
public class GenerateJTree1 extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrmGenJTree
     */
    public GenerateJTree1() {
        UIManager.put("Tree.rendererFillBackground", false);
        initComponents();
        BasicInternalFrameUI bifui = (BasicInternalFrameUI) this.getUI();
        bifui.setNorthPane(null);
        bifui.setSouthPane(null);

//        UIDefaults d = new UIDefaults();
//        d.put("Tree.selectionBackground", Color.GREEN);
//        jTree1.putClientProperty("Nimbus.Overrides", d);
//        jTree1.putClientProperty("Nimbus.Overrides.InheritDefaults", false);
        cellColour();
        try {
            loadTree();
        } catch (NotBoundException | MalformedURLException | RemoteException | ClassNotFoundException | SQLException | InterruptedException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
        }
        ToolTipManager.sharedInstance().registerComponent(jTree1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GLPrintMenu = new javax.swing.JPopupMenu();
        MainCategorization = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        ExpandAll = new javax.swing.JMenuItem();
        CollapseAll = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        GLPrintMenu.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N

        MainCategorization.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        MainCategorization.setText("මූලික වර්ගීකරණය ");
        MainCategorization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainCategorizationActionPerformed(evt);
            }
        });
        GLPrintMenu.add(MainCategorization);

        jMenuItem1.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        jMenuItem1.setText("මූලික ශීර්ෂ");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        GLPrintMenu.add(jMenuItem1);

        jMenuItem2.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        jMenuItem2.setText("උප ශීර්ෂ");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        GLPrintMenu.add(jMenuItem2);

        jMenuItem3.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        jMenuItem3.setText("සවිස්තරාත්මක");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        GLPrintMenu.add(jMenuItem3);

        ExpandAll.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        ExpandAll.setText("සියල්ල දිග හරින්න");
        ExpandAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandAllActionPerformed(evt);
            }
        });
        GLPrintMenu.add(ExpandAll);

        CollapseAll.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        CollapseAll.setText("සියල්ල වසන්න");
        CollapseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CollapseAllActionPerformed(evt);
            }
        });
        GLPrintMenu.add(CollapseAll);

        jPanel1.setBackground(new java.awt.Color(128, 128, 128));

        jTree1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(236, 242, 244), 1, true));
        jTree1.setFont(new java.awt.Font("Iskoola Pota", 0, 18)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setComponentPopupMenu(GLPrintMenu);
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 422, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged

    }//GEN-LAST:event_jTree1ValueChanged

    private void MainCategorizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainCategorizationActionPerformed
        try {
            jTree1.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            JasperReport jasperReport = JasperCompileManager.compileReport(ReportFileLocator.locateReportFile("R001_F28_GL_Tree_1.jrxml"));
            Map parameters = new HashMap<>();
            parameters.put("BankName", GeneralUserLogin.data.getBranchName());
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, DB.getConnection());
            if (GeneralUserLogin.data.isWebHosted()) {
                JasperPrintManager.printReport(jasperPrint, true);
            } else {
                JasperViewer.viewReport(jasperPrint, false);
            }
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (JRException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (SQLException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_MainCategorizationActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            jTree1.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            JasperReport jasperReport = JasperCompileManager.compileReport(ReportFileLocator.locateReportFile("R002_F28_GL_Tree_2.jrxml"));
            Map parameters = new HashMap<>();
            parameters.put("BankName", GeneralUserLogin.data.getBranchName());
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, DB.getConnection());
            if (GeneralUserLogin.data.isWebHosted()) {
                JasperPrintManager.printReport(jasperPrint, true);
            } else {
                JasperViewer.viewReport(jasperPrint, false);
            }
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (JRException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (SQLException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            jTree1.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            JasperReport jasperReport = JasperCompileManager.compileReport(ReportFileLocator.locateReportFile("R003_F28_GL_Tree_3.jrxml"));
            Map parameters = new HashMap<>();
            parameters.put("BankName", GeneralUserLogin.data.getBranchName());
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, DB.getConnection());
            if (GeneralUserLogin.data.isWebHosted()) {
                JasperPrintManager.printReport(jasperPrint, true);
            } else {
                JasperViewer.viewReport(jasperPrint, false);
            }
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (JRException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (SQLException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            jTree1.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            JasperReport jasperReport = JasperCompileManager.compileReport(ReportFileLocator.locateReportFile("R004_F28_GL_Tree_4.jrxml"));
            Map parameters = new HashMap<>();
            parameters.put("BankName", GeneralUserLogin.data.getBranchName());
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, DB.getConnection());
            JasperExportManager.exportReportToHtmlFile(jasperPrint, "ABC.html");
            if (GeneralUserLogin.data.isWebHosted()) {
                JasperPrintManager.printReport(jasperPrint, true);
            } else {
                JasperViewer.viewReport(jasperPrint, false);
            }
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (JRException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (SQLException ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
            jTree1.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        } catch (Exception ex) {
            Logger.getLogger(GenerateJTree1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void ExpandAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandAllActionPerformed
        ExpandOrCollapseTree.expandAll(jTree1);
    }//GEN-LAST:event_ExpandAllActionPerformed

    private void CollapseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CollapseAllActionPerformed
        ExpandOrCollapseTree.collapseAll(jTree1);
    }//GEN-LAST:event_CollapseAllActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CollapseAll;
    private javax.swing.JMenuItem ExpandAll;
    private javax.swing.JPopupMenu GLPrintMenu;
    private javax.swing.JMenuItem MainCategorization;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
        public static void loadTree() throws NotBoundException, MalformedURLException, RemoteException, ClassNotFoundException, SQLException, InterruptedException {

        List<Object> ob1 = new ArrayList<>();
        ob1.add(1);
        ob1.add(1);
//db Access1        
        List<List<Object>> sspFindMultyResult1 = ServerConnection.getServerConnector().searchMultipleResults(ob1, "ssp_GL_LoadCombo_ActTree", 4);

        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();

        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        for (List<Object> sspFindMultyResults1 : sspFindMultyResult1) {
            DefaultMutableTreeNode dmtn1 = new DefaultMutableTreeNode(sspFindMultyResults1.get(1) + "-" + sspFindMultyResults1.get(3));
            root.add(dmtn1);

            List<Object> ob2 = new ArrayList<>();
            ob2.add(2);
            ob2.add(sspFindMultyResults1.get(0));
//db Access2
            List<List<Object>> sspFindMultyResult2 = ServerConnection.getServerConnector().searchMultipleResults(ob2, "ssp_GL_LoadCombo_ActTree", 4);

            for (List<Object> sspFindMultyResults2 : sspFindMultyResult2) {
                DefaultMutableTreeNode dmtn2 = new DefaultMutableTreeNode(sspFindMultyResults2.get(1) + "-" + sspFindMultyResults2.get(3));
                dmtn1.add(dmtn2);
                dmtn1.getLevel();

                List<Object> ob3 = new ArrayList<>();
                ob3.add(3);
                ob3.add(sspFindMultyResults2.get(0));
//db Access3
                List<List<Object>> sspFindMultyResult3 = ServerConnection.getServerConnector().searchMultipleResults(ob3, "ssp_GL_LoadCombo_ActTree", 4);

                for (List<Object> sspFindMultyResults3 : sspFindMultyResult3) {
                    DefaultMutableTreeNode dmtn3 = new DefaultMutableTreeNode(sspFindMultyResults3.get(1) + "-" + sspFindMultyResults3.get(3));
                    dmtn2.add(dmtn3);

                    List<Object> ob4 = new ArrayList<>();
                    ob4.add(4);
                    ob4.add(sspFindMultyResults3.get(0));
//db Access4
                    List<List<Object>> sspFindMultyResult4 = ServerConnection.getServerConnector().searchMultipleResults(ob4, "ssp_GL_LoadCombo_ActTree", 4);

                    for (List<Object> sspFindMultyResults4 : sspFindMultyResult4) {
                        DefaultMutableTreeNode dmtn4 = new DefaultMutableTreeNode(sspFindMultyResults4.get(1) + "-" + sspFindMultyResults4.get(3));
                        dmtn3.add(dmtn4);

                        List<Object> ob5 = new ArrayList<>();
                        ob5.add(5);
                        ob5.add(sspFindMultyResults4.get(0));
//db Access5                        
                        List<List<Object>> sspFindMultyResult5 = ServerConnection.getServerConnector().searchMultipleResults(ob5, "ssp_GL_LoadCombo_ActTree", 4);

                        for (List<Object> sspFindMultyResults5 : sspFindMultyResult5) {
                            DefaultMutableTreeNode dmtn5 = new DefaultMutableTreeNode(sspFindMultyResults5.get(1) + "-" + sspFindMultyResults5.get(3));
                            dmtn4.add(dmtn5);

                        }
                    }
                }
            }
        }
        model.reload(root);
    }

    private void cellColour() {
        jTree1.setCellRenderer(new DefaultTreeCellRenderer() {
//            @Override
//            public Color getBackgroundNonSelectionColor() {
//                return Color.orange;
//            }
//
//            @Override
//            public Color getBackgroundSelectionColor() {
//                return Color.GREEN;
//            }
//
//            @Override
//            public Color getBackground() {
//                return Color.RED;
//            }

            @Override
            public Component getTreeCellRendererComponent(JTree pTree, Object pValue, boolean pIsSelected, boolean pIsExpanded, boolean pIsLeaf, int pRow, boolean pHasFocus) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) pValue;
                super.getTreeCellRendererComponent(pTree, pValue, pIsSelected, pIsExpanded, pIsLeaf, pRow, pHasFocus);
                switch (node.getLevel()) {
                    case 1:
                        setForeground(new java.awt.Color(4, 9, 250));
                        break;
                    case 2:
                        setForeground(new java.awt.Color(128, 0, 0));
                        break;
                    case 3:
                        setForeground(new java.awt.Color(230, 0, 230));
                        break;
                    case 4:
                        setForeground(new java.awt.Color(3, 130, 42));
                        break;
                    default:
                        break;
                }
                if (pIsSelected) {
                    setForeground(Color.white);
                }
                setToolTipText(pValue.toString());
                UIManager.put("ToolTip.background", Color.yellow);
                UIManager.put("ToolTip.font", new Font("Iskoola Pota", Font.PLAIN, 17));

                return (this);
            }

        });

    }
}
